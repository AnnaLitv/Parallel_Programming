GNAT GPL 2017 (20170515-63)
Copyright 1992-2017, Free Software Foundation, Inc.

Compiling: data.adb
Source file time stamp: 2017-09-16 07:58:02
Compiled at: 2017-09-17 21:51:42

     1.
     2. with Ada.Text_IO; 
     3. use Ada.Text_IO;
     4. with Ada.Integer_Text_IO, System.Multiprocessors; 
     5. use Ada.Integer_Text_IO, System.Multiprocessors;
     6.
     7. package body Data is
     8. -----------------------------------------------------------
     9. procedure Input_Vector1(V: out Vector; N: Integer) is
    10.
    11.
    12. begin
    13. for  ind in 1..N loop
    14. 				V(ind):=1;
    15. 			end loop;
    16. end Input_Vector1;
    17. -----------------------------------------------------------
    18. procedure Input_Vector(V: out Vector; N: Integer) is
    19.
    20.
    21. begin
    22. for  ind in 1..N loop
    23. 				Get(V(ind));
    24. 			end loop;
    25. end Input_Vector;
    26. ----------------------------------------------------------------
    27. procedure Output_Vector(V: Vector; N: Integer) is
    28. begin
    29. for i in 1..N loop
    30. 			Put(V(i));
    31. 		end loop;
    32. end Output_Vector;
    33. ----------------------------------------------------------------
    34. procedure Input_Matrix1(M: out Matrix; N: Integer) is
    35. begin
    36. for  ind in 1..N loop
    37. 			for  indx in 1..N loop
    38. 				M(ind,indx):=1;
    39. 			end loop;
    40. 			end loop;
    41. end Input_Matrix1;
    42. ---------------------------------------------------------------
    43. procedure Input_Matrix(M: out Matrix; N: Integer) is
    44. begin
    45. for  ind in 1..N loop
    46. 			Put_Line("Enter the new line");
    47. 			for  indx in 1..N loop
    48. 				Get(M(ind,indx));
    49. 			end loop;
    50. 			end loop;
    51. end Input_Matrix;
    52. ---------------------------------------------------------------
    53. procedure Output_Matrix(M:  Matrix; N: Integer) is
    54. begin
    55. for  ind in 1..N loop 
    56. 			for  indx in 1..N loop
    57. 				Put(M(ind,indx));
    58. 			end loop;
    59. 			Put_Line(" ");
    60. 			end loop;
    61. end Output_Matrix;
    62. ----------------------------------------------------------------
    63. function Mult_Matrixes(MA, MB: in Matrix; N: Integer) return Matrix is
    64.
    65. 		result: Matrix;
    66.
    67. 	begin
    68. 		for i in 1..N loop
    69. 			for j in 1..N loop
    70. 				result(i, j) := 0;
    71. 				for k in 1..N loop
    72. 					result(i, j) := result(i, j) + MA(i, k) * MB(k, j);
    73. 				end loop;
    74. 			end loop;
    75. 		end loop;
    76.
    77. 		return result;
    78. 	end Mult_Matrixes;
    79. ----------------------------------------------------------------
    80. function Mult_Vector_Matrix(A: in Vector; MB: in Matrix; N: Integer) return Vector is
    81.
    82. 		res: Vector;
    83.
    84. 	begin
    85. 		for i in 1..N loop
    86. 			res(i) := 0;
    87. 			for j in 1..N loop
    88. 				res(i) := res(i) + MB(j, i) * A(j);
    89. 			end loop;
    90. 		end loop;
    91.
    92. 		return res;
    93. 	end Mult_Vector_Matrix;
    94. ----------------------------------------------------------------
    95. function Sum_Vectors(A, B: in Vector; N:Integer) return Vector is
    96.
    97. 		res: Vector;
    98.
    99. 	begin
   100. 		for i in 1..N loop
   101. 			res(i) := A(i) + B(i);
   102. 		end loop;
   103.
   104. 		return res;
   105. 	end Sum_Vectors;
   106. ----------------------------------------------------------------
   107. function Sum_Matrices(MA, MB: in Matrix; N:Integer) return Matrix is
   108.
   109. 		res: Matrix;
   110.
   111. 	begin
   112. 		for i in 1..N loop
   113. 			for j in 1..N loop
   114. 				res(i, j) := MA(i, j) + MB(i, j);
   115. 			end loop;
   116. 		end loop;
   117.
   118. 		return res;
   119. 	end Sum_Matrices;
   120. ----------------------------------------------------------------
   121. function Min_Vector(A: in Vector; N: Integer) return Integer is
   122.
   123. 	res: Integer;
   124.
   125. 	begin
   126. 		res := A(1);
   127. 		for i in 2..N loop
   128. 			if res > A(i) then
   129. 				res := A(i);
   130. 			end if;
   131. 		end loop;
   132.
   133. 		return res;
   134. 	end Min_Vector;
   135. ---------------------------------------------------------------
   136. function Sort_Vector(A:in Vector; N: Integer)return Vector is
   137.
   138. 	res: Vector;
   139. 	buf: Integer;
   140. 	
   141. 	begin
   142. 	res:=A;
   143. 		for i in 1..N loop
   144. 			for j in i+1..N loop
   145. 				if res(i)>res(j) then
   146. 					buf:=res(i);
   147. 					res(i):=res(j);
   148. 					res(j):=buf;
   149. 				end if;
   150. 			end loop;
   151. 		end loop;
   152. 	return res;
   153. end Sort_Vector;
   154. ----------------------------------------------------------------
   155. function Mult_Scalar_Vector(a: in Integer; B: in Vector; N: Integer) return Vector is
   156.
   157. 		res: Vector;
   158.
   159. 	begin
   160. 		for i in 1..N loop
   161. 			res(i) := a * B(i);
   162. 		end loop;
   163.
   164. 		return res;
   165. 	end Mult_Scalar_Vector;
   166. ----------------------------------------------------------------
   167. function Trans_Matrix(MA: Matrix; N: Integer) return Matrix is
   168.
   169. 	res: Matrix;
   170. 	buf: Matrix;
   171. 	
   172. begin
   173. 	buf:=MA;
   174. 	for i in 1..N loop
   175. 			for j in 1..N loop
   176. 			begin
   177. 			res(i,j):=buf(j,i);
   178. 			res(j,i):=buf(i,j);		
   179. 			end;
   180. 			end loop;
   181. 	end loop;
   182. 	
   183. 	return res;
   184. end Trans_Matrix;
   185. ----------------------------------------------------------------
   186. procedure Func1 is
   187. 	N:Integer;
   188. 	A_V, B_V, C_V	  : Vector := ( others => 0 );
   189. 	MA_V, MD_V		  : Matrix;
   190. begin
   191. delay 5.0;
   192. 	Put_Line("task 1 started!");
   193. 	Put_Line("Enter the N: ");
   194. 	Get(N);
   195. 	Input_Vector1(B_V, N);
   196. 	Input_Vector1(C_V, N);
   197. 	Input_Matrix1(MA_V,N);
   198. 	Input_Matrix1(MD_V, N);
   199. 	A_V:=Mult_Vector_Matrix(Mult_Scalar_Vector(Min_Vector(C_V,N),B_V,N), Sum_Matrices(Mult_Matrixes(MA_V, MD_V, N),MD_V,N),N);
   200. 	if N<10 then
   201. 	Output_Vector(A_V,N);
   202. 	end if;
   203. 	Put_Line("task 1 finished!");
   204. 	delay 5.0;
   205. end Func1;
   206.
   207. procedure Func2 is
   208. 	N:Integer;
   209.
   210. 	MA_V, MD_V, MZ_V, MB_V, MK_V, FI_V, TH_V   :Matrix:= ( others => (others => 0) );
   211. 	
   212. begin
   213. delay 7.0;
   214. 	Put_Line("task 2 started!");
   215. 	Put_Line("Enter the N: ");
   216. 	Get(N);
   217. 	Input_Matrix1(MA_V, N);
   218. 	Input_Matrix1(MZ_V, N);
   219. 	Input_Matrix1(MB_V, N);
   220. 	MK_V:=Sum_Matrices(Mult_Matrixes(Mult_Matrixes(MA_V,MZ_V,N),MA_V,N),Trans_Matrix(MB_V,N),N);
   221. 	if N<10 then
   222. 	Output_Matrix(MK_V,N);
   223. 	end if;
   224. 	Put_Line("task 2 finished!");
   225. end Func2;
   226.
   227. procedure Func3 is
   228. 	N:Integer;
   229. 	
   230. 	R_V, S_V, O_V  :Vector:= ( others => 0 );
   231. 	MT_V, MP_V:Matrix:= ( others => (others => 0) );
   232. 	begin
   233. 	delay 9.0;
   234. 		Put_Line("task 3 started!");
   235. 		Put_Line("Enter the N: "); --ввoдим N
   236. 		Get(N);
   237. 		Input_Vector1(R_V, N);
   238. 		Input_Vector1(S_V, N);
   239. 		Input_Matrix1(MT_V, N);
   240. 		Input_Matrix1(MP_V, N);
   241. 		O_V:=Mult_Vector_Matrix(Sort_Vector(Sum_Vectors(R_V,S_V,N),N),Mult_Matrixes(MT_V,MP_V,N),N);
   242. 		if N<10 then
   243. 		Output_Vector(O_V,N);
   244. 		end if;
   245. 		Put_Line("task 3 finished!");
   246. end Func3;
   247.
   248.
   249. --------------------------------------------------------------------------
   250.
   251. --------------------------------------------------------------------------
   252.
   253. -------------------------------------------------------------------------
   254. end Data;

Compiling: data.ads
Source file time stamp: 2017-09-16 07:24:42
Compiled at: 2017-09-17 21:51:42

     1. generic
     2. N: Integer;
     3. package Data is
     4.
     5. type Matrix is private;
     6. type Vector is private;
     7.
     8. 	procedure Func1;
     9. 	procedure Func2;
    10. 	procedure Func3;
    11. 	procedure Input_Vector1(V: out Vector; N: Integer);
    12. 	procedure Output_Vector(V: Vector; N: Integer);
    13. 	procedure Input_Matrix1(M: out Matrix; N: Integer);
    14. 	procedure Output_Matrix(M:  Matrix; N: Integer);
    15. 	function Mult_Matrixes(MA, MB: in Matrix; N: Integer) return Matrix;
    16. 	function Mult_Vector_Matrix(A: in Vector; MB: in Matrix; N: Integer) return Vector;
    17. 	function Sum_Vectors(A, B: in Vector; N:Integer) return Vector;
    18. 	function Sum_Matrices(MA, MB: in Matrix; N:Integer) return Matrix;
    19. 	function Min_Vector(A: in Vector; N: Integer) return Integer;
    20. 	function Sort_Vector(A:in Vector; N: Integer)return Vector;
    21. 	function Mult_Scalar_Vector(a: in Integer; B: in Vector; N: Integer) return Vector;
    22. 	function Trans_Matrix(MA: Matrix; N: Integer) return Matrix;
    23. 	
    24. 	private
    25. 		
    26. 	type Vector is array(1..N) of Integer;
    27. 	type Matrix is array(1..N, 1..N) of Integer;
    28. 	
    29. 	
    30. end Data;

 254 lines: No errors
